#################################
#                               #
#   Data Source Configuration   #
#                               #
#################################

#   driver to use for the test - can only take one value
store = com.facebook.LinkBench.LinkStoreMysql

# mysql configuration
host = yourhostname.here
user = mysqluser
password = mysqlpass
dbid = linkdb
port = 3306

###############################
#                             #
#   Benchmark Configuration   #
#                             #
###############################

tablename = linktable

# ignore counttable if not using mysql
counttable = counttable

# This controls logging output.  Settings are, in order of increasing
# verbosity:
# ERROR: only output serious errors
# WARN: output warnings
# INFO: output additional information such as progress
# DEBUG: output high-level debugging information
# TRACE: output more detailed lower-level debugging information
debuglevel = INFO

# number of threads to run during load phase
loaders = 10
# partition loading work into chunks of id1s of this size
loader_chunk_size = 2048

# number of threads to run during request phase
requesters = 100

# id1 at which to start (inclusive)
startid1 = 1

# id1 at which to stop (exclusive);
maxid1 = 10000001

# if nonzero, generate id2 randomly between 0 and this - 1 during load
# and lookups. Caution - this needs to be <= max 32 bit integer in java
randomid2max = 0

# configuration for generating id2 in the request phase
# 0 means thread i generates id2 randomly without restriction;
# 1 means thread i generates id2 such that id2 % nrequesters = i,
#   this is to prevent threads from adding/deleting/updating same cells,
#   always use this configuration (1) when using HBaseGeneralAtomicityTesting;
id2gen_config = 0

# read + write requests per thread
requests = 500000

# max duration in seconds for the 2nd part of benchmark (1st part is load)
maxtime = 3600

# percentage split of requdests into addlink, deletelink, updatelink,
# getlink (point look-up), getlinklist (range look-up), countlinks.
# need to add up to 100
# Caution: countlink, getlink and getlinklist should be set to 0 when
#   using HBaseGeneralAtomictityTesting
# an exception will be thrown in case of failure to do so
addlink = 4.7134474362
deletelink = 0.6567126524
updatelink = 3.3448509064
countlink = 21.0929379261
getlink = 1.3015403725
getlinklist = 68.8905107064

# stats on timetaken displayed after this many seconds (min, max etc)
displayfreq = 1800

# display short progress update after this many seconds (not full stats) 
progressfreq = 300

# if number of operations is > this, we store timetaken only for this many
# operations
maxsamples = 10000

# how many bytes to put in 'data' field
datasize = 100

# #links distribution function
# -1 means small id1s tend to get more #links : #links(id1) = maxid1/(1+id1)
# 0 means id1s that are multiples of nlinks_config get nlinks_config links
#   (rest get nlinks_default)
# 2 means perfect squares get more #links (rest get nlinks_default)
#   the larger a perfect square is, the more #links it gets
# 3 means perfect cubes get more #links
# 4-99 behave in a similar way
# 100 means exponential i.e powers of nlinks_config get more #links
nlinks_func = -2
#config param that goes along with nlinks_func
nlinks_config = 1
# use 0 or 1 for this
nlinks_default = 0

# read distribution function
# behaves in a similar way as nlinks_func documented above
read_function = -2
# config param to tune the above distribution function
read_config = 1

# write distribution function
# config param to tune the above distribution function
write_function = -2

# config param to tune the above distribution function
write_config = 1

data_file = config/Distribution.dat

###############################
#                             #
#   MySql Configuration       #
#                             #
###############################

# optional tuning - # of link inserts to batch together when loading
# mysql_bulk_insert_batch = 1024
