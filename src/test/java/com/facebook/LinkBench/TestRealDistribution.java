package com.facebook.LinkBench;

import java.io.*;
import java.util.*;

/*
 * This class measures how similar data generated by class RealDistribution 
 * and the data file is.
 */
public class TestRealDistribution {

  //return the distribution for a sequence of numbers
  private static Map getDistribution(int[] seq, int start, int end) {
    //create a map from values to number of times they appears in the sequence
    Map<Integer, Integer> map = new TreeMap<Integer, Integer>();
    for (int i = start; i < end; ++i) {
      Integer p = map.get(seq[i]);
      if (p==null) map.put(seq[i], 1);
      else map.put(seq[i], p + 1);
    }

    //calculate the cumulative distribution of map
    Map<Integer, Double> cdf = new TreeMap<Integer, Double>();
    double sum = 0;
    for (Object key : map.keySet()) {
      sum += 100.0 * map.get((Integer)key) / (end - start);
      cdf.put((Integer)key, sum);
    }
    return cdf;
  }

  //return the maximum error between two distributions
  private static double getComparisonError(Map a, Map b) {
    double error = 0;

    Double pre_db = 0.0;
    for (Object key : a.keySet()) {
      Double da = (Double)a.get((Integer)key);
      Double db = (Double)b.get((Integer)key);
      if (db == null) db = pre_db;
      else pre_db = db;
      error = Math.max(error, Math.abs(da - db));
    }
    
    Double pre_da = 0.0;
    for (Object key : b.keySet()) {
      Double db = (Double)b.get((Integer)key);
      Double da = (Double)a.get((Integer)key);
      if (da == null) da = pre_da;
      else pre_da = da;
      error = Math.max(error, Math.abs(da - db));
    }

    return error;
  }

  //test RealDistribution.getNextId1
  //type is either "nlinks" or "nwrites"
  //maxid1 is exclusive
  private static double testGetNextId1(int startid1, int maxid1, String type) 
  throws Exception {
    
    int[] cnt = new int[maxid1];
    
    double nqueries = (maxid1 - startid1)*RealDistribution.getArea(type)
      /100.0;

    for (int i = 0; i < nqueries; ++i) {
      long x = RealDistribution.getNextId1(startid1, maxid1, 
          type.equals("nwrites"));
      if (x < startid1 || x >= maxid1) {
        throw new Exception("Invalid value of id1: " + x);
      }
      cnt[(int)x]++;
    }
    
    Map generated_data = getDistribution(cnt, startid1, maxid1);
    Map real_data = RealDistribution.getCDF(type);
    return getComparisonError(generated_data, real_data);
  }

  //test getNLinks
  private static double testGetNlinks(int startid1, int maxid1) 
  throws Exception {

    int[] nlinks = new int[maxid1];
    for (int i = startid1; i < maxid1; ++i) {
      long x = RealDistribution.getNlinks(i, startid1, maxid1);
      nlinks[i] = (int)x;
    }

    Map generated_data = getDistribution(nlinks, startid1, maxid1);
    Map real_data = RealDistribution.getCDF("nlinks");
    return getComparisonError(generated_data, real_data);
  }

  public static void main(String[] args) {
    if (args.length != 1) {
      System.out.println("Arguments: <config file>");
    }

    try {
      Properties props = new Properties();
      props.load(new FileInputStream(args[0]));

      RealDistribution.reload(props);
      System.out.println(testGetNlinks(1000000, 2000001));
      System.out.println(testGetNlinks(1234567, 7654321));
      System.out.println(testGetNlinks(97, 10000097));
      
      System.out.println(testGetNextId1(1000000, 2000001, "nreads"));
      System.out.println(testGetNextId1(1000000, 2000001, "nwrites"));

      
      RealDistribution.reload(props);
      System.out.println(testGetNextId1(1234567, 7654321, "nreads"));
      System.out.println(testGetNextId1(1234567, 7654321, "nwrites"));

      RealDistribution.reload(props);
      System.out.println(testGetNextId1(97, 10000097, "nreads"));
      System.out.println(testGetNextId1(97, 10000097, "nwrites"));

    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}

